{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/componenets/stock-history-chart/stock-history-chart.component.css","webpack:///./src/app/componenets/stock-history-chart/stock-history-chart.component.html","webpack:///./src/app/componenets/stock-history-chart/stock-history-chart.component.ts","webpack:///./src/app/componenets/stock-history/stock-history.component.css","webpack:///./src/app/componenets/stock-history/stock-history.component.html","webpack:///./src/app/componenets/stock-history/stock-history.component.ts","webpack:///./src/app/componenets/stocks-market-chart/stocks-market-chart.component.css","webpack:///./src/app/componenets/stocks-market-chart/stocks-market-chart.component.html","webpack:///./src/app/componenets/stocks-market-chart/stocks-market-chart.component.ts","webpack:///./src/app/componenets/stocks-view/stocks-view.component.css","webpack:///./src/app/componenets/stocks-view/stocks-view.component.html","webpack:///./src/app/componenets/stocks-view/stocks-view.component.ts","webpack:///./src/app/componenets/success-dialog/success-dialog.component.css","webpack:///./src/app/componenets/success-dialog/success-dialog.component.html","webpack:///./src/app/componenets/success-dialog/success-dialog.component.ts","webpack:///./src/app/componenets/user-history/user-history.component.css","webpack:///./src/app/componenets/user-history/user-history.component.html","webpack:///./src/app/componenets/user-history/user-history.component.ts","webpack:///./src/app/componenets/user-protfolio-graph/user-protfolio-graph.component.css","webpack:///./src/app/componenets/user-protfolio-graph/user-protfolio-graph.component.html","webpack:///./src/app/componenets/user-protfolio-graph/user-protfolio-graph.component.ts","webpack:///./src/app/componenets/user-protfolio/user-protfolio.component.css","webpack:///./src/app/componenets/user-protfolio/user-protfolio.component.html","webpack:///./src/app/componenets/user-protfolio/user-protfolio.component.ts","webpack:///./src/app/componenets/user-trade/user-trade.component.css","webpack:///./src/app/componenets/user-trade/user-trade.component.html","webpack:///./src/app/componenets/user-trade/user-trade.component.ts","webpack:///./src/app/errors/errors-component/errors.component.css","webpack:///./src/app/errors/errors-component/errors.component.html","webpack:///./src/app/errors/errors-component/errors.component.ts","webpack:///./src/app/errors/errors-handler/errors-handler.ts","webpack:///./src/app/pipes/op-transform.pipe.ts","webpack:///./src/app/routing/app.routing.ts","webpack:///./src/app/services/notification-service/notification-srv.service.ts","webpack:///./src/app/services/stocks-service/stocks-srv.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///ws (ignored)"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"p {\\n    font-family: Lato;\\n    color: white;\\n    text-transform: uppercase;\\n    word-wrap:break-word;\\n  }\\n  \\n  .notification {\\n      position: absolute;\\n      z-index: 1;\\n      top: 5px;\\n      line-height: 20px;\\n      text-align: center;\\n      right: 5px;\\n      background: linear-gradient(-90deg, #cb5cd2, #cc3fa0);\\n      color: white;\\n      font-style: oblique;\\n      text-transform: capitalize;\\n      box-shadow: 0 3px 1px -2px rgba(0,0,0,.2), 0 2px 2px 0 rgba(0,0,0,.14), 0 1px 5px 0 rgba(0,0,0,.12);\\n      min-height: 20px;\\n      min-width: 160px;\\n      max-width: 300px;\\n      padding: 15px;\\n      cursor: pointer;\\n  }\"","module.exports = \"<mat-toolbar color=\\\"primary\\\" *ngIf=\\\"!showNotification\\\">\\n    <span>Godav Stocks</span>\\n    <a mat-button [routerLink]=\\\"['/']\\\" routerLinkActive='active' >Home</a>\\n    <a mat-button [routerLink]=\\\"['/','user-protfolio']\\\" routerLinkActive='active'>Protfolio</a>\\n</mat-toolbar>\\n<!-- <div *ngIf=\\\"notification && showNotification\\\"\\n     (click)=\\\"showNotification = !showNotification\\\"\\n     class=\\\"notification\\\">\\n  <p>{{ notification }}</p>\\n</div> -->\\n<app-stocks-view *ngIf=\\\"!showNotification\\\"></app-stocks-view>\\n<router-outlet></router-outlet>\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NotificationSrvService } from './services/notification-service/notification-srv.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'stocksClient';\n\n  showNotification: boolean;\n\n  constructor(\n    private notificationService: NotificationSrvService,\n  ) { }\n\n  ngOnInit() {\n    this.notificationService\n      .errors$\n      .subscribe(isError => {\n        this.showNotification = isError;\n      });\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, ErrorHandler } from '@angular/core';\nimport { HttpClientModule } from '../../node_modules/@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '../../node_modules/@angular/router';\nimport { ROUTES } from './routing/app.routing';\nimport { AppComponent } from './app.component';\nimport { StocksViewComponent } from    './componenets/stocks-view/stocks-view.component';\nimport { StockHistoryComponent } from './componenets/stock-history/stock-history.component';\nimport { UserProtfolioComponent } from './componenets/user-protfolio/user-protfolio.component';\nimport { UserHistoryComponent } from './componenets/user-history/user-history.component';\nimport { UserTradeComponent } from './componenets/user-trade/user-trade.component';\nimport 'hammerjs';\nimport { ChartModule } from 'angular-highcharts';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatButtonModule, MatCheckboxModule, MatTableModule,\n   MatProgressSpinnerModule, MatToolbarModule,MatInputModule,\n   MatCardModule,\n   MatDialogModule,\n   MatDividerModule,\n   MatLineModule,\n   MatListModule,\n   MatSliderModule,\n   MatPaginatorModule,\n   MatTabsModule} from '@angular/material';\nimport { OpTransformPipe } from './pipes/op-transform.pipe';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport { SocketIoModule, SocketIoConfig } from 'ngx-socket-io';\nimport { SuccessDialogComponent } from './componenets/success-dialog/success-dialog.component';\nimport { StockHistoryChartComponent } from './componenets/stock-history-chart/stock-history-chart.component';\nimport { StocksMarketChartComponent } from './componenets/stocks-market-chart/stocks-market-chart.component';\nimport { UserProtfolioGraphComponent } from './componenets/user-protfolio-graph/user-protfolio-graph.component';\nimport { environment } from '../environments/environment';\nimport { ErrorsHandler } from './errors/errors-handler/errors-handler';\nimport { ErrorsComponent } from './errors/errors-component/errors.component';\n\nconst config: SocketIoConfig = { url: `${environment.API_URL}`, options: {} };\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    StocksViewComponent,\n    StockHistoryComponent,\n    UserProtfolioComponent,\n    UserHistoryComponent,\n    UserTradeComponent,\n    OpTransformPipe,\n    SuccessDialogComponent,\n    StockHistoryChartComponent,\n    StocksMarketChartComponent,\n    UserProtfolioGraphComponent,\n    ErrorsComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    ChartModule,\n    MatButtonModule, \n    MatCheckboxModule,\n    MatDialogModule,\n    MatTableModule,\n    MatProgressSpinnerModule,\n    MatToolbarModule,\n    MatButtonModule,\n    FormsModule,\n    MatInputModule,\n    MatTabsModule,\n    MatDividerModule,\n    MatSliderModule,\n    MatLineModule,\n    MatPaginatorModule,\n    MatListModule,\n    MatCardModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    SocketIoModule.forRoot(config),\n    RouterModule.forRoot(ROUTES,{\n      onSameUrlNavigation: 'reload'\n    })\n  ],\n  providers: [{\n    provide: ErrorHandler,\n    useClass: ErrorsHandler,\n  }],\n  bootstrap: [AppComponent],\n  entryComponents: [SuccessDialogComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<div *ngIf=\\\"data.length > 0\\\" [chart]=\\\"stockChart\\\"></div>\\n\\n<div *ngIf=\\\"data.length === 0\\\" class=\\\"top center\\\">\\n    <mat-card>User Don't have stocks in protfolio !</mat-card>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Highcharts, Chart } from 'angular-highcharts';\nimport { BaseStock } from '../../models/stock';\nimport { StocksSrvService } from '../../services/stocks-service/stocks-srv.service';\nimport { ActivatedRoute } from '@angular/router';\n\nHighcharts.setOptions({\n  global: {\n    useUTC: true,\n    timezoneOffset: 0\n  }\n});\n\n@Component({\n  selector: 'app-stock-history-chart',\n  templateUrl: './stock-history-chart.component.html',\n  styleUrls: ['./stock-history-chart.component.css']\n})\nexport class StockHistoryChartComponent implements OnInit {\n  data: any = [];\n  stocksHistoryData: BaseStock;\n  stockChart: Chart;\n  Highcharts = Highcharts;\n\n  constructor(private stockSrv: StocksSrvService,\n    private activatedRoute: ActivatedRoute) {\n    activatedRoute.params.subscribe(params => {\n      this.stockSrv.getStockHistoryForChart(params['symbol']).subscribe(data => {\n        this.data = data[0];\n        this.stockChart = new Chart({\n          chart: {\n            zoomType: 'x'\n          },\n          title: {\n            text: 'Prices change over time for ' + data[1] + ' stock'\n          },\n          xAxis: {\n            type: 'datetime'\n          },\n          yAxis: {\n            title: {\n              text: 'Price'\n            }\n          },\n          legend: {\n            enabled: false\n          },\n          credits: {\n            enabled: false\n          },\n          series: [\n            {\n              name: 'Market History',\n              data: this.data\n            }\n          ]\n        });\n      });\n    });\n  }\n\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"table {\\n    width: 100%;\\n    margin-top: 1%;\\n  }\"","module.exports = \"<div class=\\\"spinner-container\\\" *ngIf=\\\"dataSource.loading$ | async\\\">\\n  <mat-progress-spinner></mat-progress-spinner>\\n</div>\\n<div class=\\\"mat-elevation-z8\\\">\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\n\\n    <!-- Symbol Column -->\\n    <ng-container matColumnDef=\\\"symbol\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Symbol </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\n    </ng-container>\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n    </ng-container>\\n\\n    <!-- price Column -->\\n    <ng-container matColumnDef=\\\"price\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Price </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.price | number:'1.2-2'}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"createdAt\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Saved At </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.createdAt | date:'d/M/yy, h:mm a'}} </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n  <mat-paginator #paginator [length]='totalSize' [pageSize]='pageSize' showFirstLastButtons></mat-paginator>\\n\\n  <div *ngIf=\\\"totalSize === 0\\\" class=\\\"center\\\">\\n    <mat-card>User didn't commit any transaction!</mat-card>\\n  </div>\\n</div>\"","import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\nimport { StocksSrvService } from '../../services/stocks-service/stocks-srv.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { BaseStock } from '../../models/stock';\n\n\n@Component({\n  selector: 'app-stock-history',\n  templateUrl: './stock-history.component.html',\n  styleUrls: ['./stock-history.component.css']\n})\nexport class StockHistoryComponent implements OnInit, AfterViewInit {\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n\n  displayedColumns: string[] = ['symbol',\n    'name',\n    'price',\n    'createdAt'\n  ];\n\n  dataSource = new MatTableDataSource();\n\n  stockSymbol: string = null;\n  stock: BaseStock;\n  totalSize: number;\n  pageSize: number = 5;\n\n  constructor(private stockSrv: StocksSrvService,\n    private activatedRoute: ActivatedRoute) {\n    activatedRoute.params.subscribe(params => {\n      this.stockSymbol = params['symbol'];\n\n      //first call to fill the table\n      this.stockSrv.getStockHistory(this.stockSymbol, 0, this.pageSize)\n        .subscribe((data) => {\n          this.dataSource.data = data[0];\n          this.totalSize = data[1];\n        });\n    })\n  }\n\n  ngAfterViewInit() {\n    if (this.paginator) {\n      this.paginator.page.subscribe((data) => {\n        this.stockSrv.getStockHistory(this.stockSymbol, data.pageIndex, data.pageSize)\n          .subscribe((data) => {\n            this.totalSize = data[1];\n            this.dataSource.data = data[0];\n          });\n      })\n    }\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".top{\\n    margin-top: 1%;\\n}\"","module.exports = \"<div *ngIf=\\\"data.length > 0\\\" [chart]=\\\"stockChart\\\"></div>\\n\\n<div *ngIf=\\\"data.length === 0\\\" class=\\\"top center\\\">\\n    <mat-card>User Don't have stocks in protfolio !</mat-card>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Highcharts, Chart } from 'angular-highcharts';\nimport { BaseStock } from '../../models/stock';\nimport { StocksSrvService } from '../../services/stocks-service/stocks-srv.service';\nimport { ActivatedRoute } from '@angular/router';\n\nHighcharts.setOptions({\n  global: {\n    useUTC: true,\n    timezoneOffset: 0\n  }\n});\n\n@Component({\n  selector: 'app-stocks-market-chart',\n  templateUrl: './stocks-market-chart.component.html',\n  styleUrls: ['./stocks-market-chart.component.css']\n})\nexport class StocksMarketChartComponent implements OnInit {\n\n  stocksHistoryData: BaseStock;\n  stockChart: Chart;\n  Highcharts = Highcharts;\n  data: any = [];\n\n  constructor(private stockSrv: StocksSrvService, private activatedRoute: ActivatedRoute) {\n    activatedRoute.params.subscribe(params => {\n      this.stockSrv.getStocksMarketForChart().subscribe(data => {\n        \n        this.data = data;\n        \n        this.stockChart = new Chart({\n          chart: {\n            zoomType: 'x'\n          },\n          title: {\n            text: 'Prices change over time in the market'\n          },\n          xAxis: {\n            type: 'datetime'\n          },\n          yAxis: {\n            title: {\n              text: 'Price'\n            }\n          },\n          legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle'\n          },\n          credits: {\n            enabled: false\n          },\n          series: this.data,\n        });\n      });\n    });\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"table {\\n    width: 100%;\\n    padding: 2%;\\n  }\\n\\n.up{\\n    color: green;\\n}\\n\\n.down{\\n    color: red;\\n}\\n\\n.right{\\n    text-align:right;\\n    padding-right: 1%;\\n}\"","module.exports = \"<div class=\\\"spinner-container\\\" *ngIf=\\\"dataSource.loading$ | async\\\">\\n  <mat-progress-spinner></mat-progress-spinner>\\n</div>\\n\\n<mat-tab-group>\\n  <mat-tab label=\\\"Online Market\\\">\\n    <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n      <!-- Symbol Column -->\\n      <ng-container matColumnDef=\\\"symbol\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Symbol </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\n      </ng-container>\\n\\n      <!-- Name Column -->\\n      <ng-container matColumnDef=\\\"name\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n      </ng-container>\\n\\n      <!-- price Column -->\\n      <ng-container matColumnDef=\\\"price\\\">\\n        <th class=\\\"right\\\" mat-header-cell *matHeaderCellDef mat-sort-header> Price </th>\\n        <td class=\\\"right\\\" mat-cell *matCellDef=\\\"let element\\\"> {{element.price | currency}} </td>\\n      </ng-container>\\n\\n      <!-- priceChangeInDot Column -->\\n      <ng-container matColumnDef=\\\"priceChangeDots\\\">\\n        <th class=\\\"right\\\" mat-header-cell *matHeaderCellDef mat-sort-header> Change $</th>\\n        <td class=\\\"right\\\" mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"checkChangeRaised(element.priceChangeDots)?'up':'down'\\\">\\n        {{element.priceChangeDots | currency}} </td>\\n      </ng-container>\\n\\n      <!-- priceChangeInPercent Column -->\\n      <ng-container matColumnDef=\\\"priceChangePercent\\\">\\n        <th class=\\\"right\\\" mat-header-cell *matHeaderCellDef mat-sort-header> Change % </th>\\n        <td class=\\\"right\\\" mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"checkChangeRaised(element.priceChangeDots)?'up':'down'\\\">{{element.priceChangePercent\\n          | percent:'1.2-2'}}</td>\\n      </ng-container>\\n\\n      <!-- History operation Column -->\\n      <ng-container matColumnDef=\\\"history\\\">\\n        <th class=\\\"center\\\" mat-header-cell *matHeaderCellDef> History </th>\\n        <td class=\\\"center\\\" mat-cell *matCellDef=\\\"let element\\\">\\n          <button mat-stroked-button color=\\\"primary\\\" (click)=goToStockHistory(element)>History</button>\\n        </td>\\n      </ng-container>\\n\\n      <!-- Graph operation Column -->\\n      <ng-container matColumnDef=\\\"graph\\\">\\n        <th class=\\\"center\\\" mat-header-cell *matHeaderCellDef> Graph </th>\\n        <td class=\\\"center\\\" mat-cell *matCellDef=\\\"let element\\\">\\n          <button mat-stroked-button color=\\\"primary\\\" (click)=goToChart(element)>Graph</button>\\n        </td>\\n      </ng-container>\\n\\n      <!-- Buy operation Column -->\\n      <ng-container matColumnDef=\\\"buyOperation\\\">\\n        <th class=\\\"center\\\" mat-header-cell *matHeaderCellDef> Buy </th>\\n        <td class=\\\"center\\\" mat-cell *matCellDef=\\\"let element\\\">\\n          <button mat-stroked-button color=\\\"primary\\\" (click)=goToBuyStocks(element)>Buy</button>\\n        </td>\\n      </ng-container>\\n\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n    </table>\\n\\n  </mat-tab>\\n  <mat-tab label=\\\"Market on graph\\\" >\\n      <ng-template matTabContent>\\n    <app-stocks-market-chart></app-stocks-market-chart>\\n  </ng-template>\\n  </mat-tab>\\n</mat-tab-group>\"","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Stock } from '../../models/stock';\nimport { StocksSrvService } from '../../services/stocks-service/stocks-srv.service';\nimport { MatTableDataSource } from '@angular/material';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-stocks-view',\n  templateUrl: './stocks-view.component.html',\n  styleUrls: ['./stocks-view.component.css']\n})\nexport class StocksViewComponent implements OnInit {\n\n  stocks: Observable<Array<Stock>>;\n  dataSource = new MatTableDataSource();\n  displayedColumns: string[] = ['symbol',\n    'name',\n    'price',\n    'priceChangeDots',\n    'priceChangePercent',\n    'history',\n    'graph',\n    'buyOperation'\n  ];\n\n\n  constructor(private stockSrv: StocksSrvService,\n    private router: Router) {\n    this.stockSrv.stocks$.subscribe(data => this.dataSource.data = data);\n  }\n\n  // used to make the colors red/green\n  checkChangeRaised(dots) {\n    return dots >= 0;\n  }\n\n  goToStockHistory(element: Stock) {\n    this.router.navigate(['/', 'stock-history', element.symbol]);\n  }\n\n  goToBuyStocks(element: Stock) {\n    this.router.navigate(['/', 'user-trade', element.symbol, 1]);\n  }\n\n  goToChart(element: Stock) {\n    this.router.navigate(['/', 'stock-history-chart', element.symbol]);\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<h2 mat-dialog-title>You successfuly made a {{data.type}} for {{data.name}} stocks:</h2>\\n<mat-dialog-content>\\n  <mat-list>\\n    <mat-list-item>\\n      <h4 mat-line>Price: {{data.price | number:'1.2-2'}}</h4>\\n    </mat-list-item>\\n    <mat-list-item>\\n      <h4 mat-line>Amount: {{data.amount}}</h4>\\n      <mat-divider [inset]=\\\"true\\\"></mat-divider>\\n    </mat-list-item>\\n    <mat-list-item>\\n      <h4 mat-line>Total: {{data.total | currency}}</h4>\\n    </mat-list-item>\\n  </mat-list>\\n</mat-dialog-content>\\n<mat-dialog-actions>\\n  <button mat-button mat-dialog-close>OK</button>\\n</mat-dialog-actions>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\n\n@Component({\n  selector: 'app-success-dialog',\n  templateUrl: './success-dialog.component.html',\n  styleUrls: ['./success-dialog.component.css']\n})\nexport class SuccessDialogComponent implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any) {\n\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"table {\\n    width: 100%;\\n    margin-top: 1%;\\n  }\"","module.exports = \"<div class=\\\"spinner-container\\\" *ngIf=\\\"dataSource.loading$ | async\\\">\\n    <mat-progress-spinner></mat-progress-spinner>\\n  </div>\\n\\n  <div class=\\\"mat-elevation-z8\\\">\\n      <table mat-table [dataSource]=\\\"dataSource\\\" matSort >\\n      \\n         <!-- Symbol Column -->\\n    <ng-container matColumnDef=\\\"symbol\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Symbol </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\n      </ng-container>\\n    \\n      <!-- Name Column -->\\n      <ng-container matColumnDef=\\\"name\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n      </ng-container>\\n    \\n      <ng-container matColumnDef=\\\"amount\\\">\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Amount </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.amount | number:'1.0-0'}} </td>\\n        </ng-container>\\n  \\n      <!-- price Column -->\\n      <ng-container matColumnDef=\\\"price\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Price </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.price | currency}} </td>\\n      </ng-container>\\n    \\n      <!-- operation Column -->\\n      <ng-container matColumnDef=\\\"operation\\\">\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Operation </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.operation | opTransform}} </td>\\n        </ng-container>\\n    \\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n      </table>\\n    \\n      <mat-paginator #paginator [length]='totalSize' [pageSize]='pageSize' showFirstLastButtons></mat-paginator>\\n      <div *ngIf=\\\"totalSize === 0\\\" class=\\\"center\\\">\\n        <mat-card>User didn't commit any transaction!</mat-card>\\n      </div>\\n  </div>\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\nimport { StocksSrvService } from '../../services/stocks-service/stocks-srv.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { UserStocksOp } from '../../models/stock';\n\n@Component({\n  selector: 'app-user-history',\n  templateUrl: './user-history.component.html',\n  styleUrls: ['./user-history.component.css']\n})\n\nexport class UserHistoryComponent implements OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  dataSource = new MatTableDataSource();\n  stockSymbol: string = null;\n  stock: UserStocksOp;\n  totalSize: number;\n  pageSize: number = 5;\n  displayedColumns: string[] = ['symbol',\n    'name',\n    'amount',\n    'price',\n    'operation'\n  ];\n\n  constructor(private stockSrv: StocksSrvService,\n    private activatedRoute: ActivatedRoute) {\n\n    //first call to fill the table\n    this.stockSrv.getUserStockHistory(0, this.pageSize).subscribe((data) => {\n      this.dataSource.data = data[0];\n      this.totalSize = data[1];\n    });\n  }\n\n  ngAfterViewInit() {\n    if (this.paginator) {\n      this.paginator.page.subscribe((data) => {\n        this.stockSrv.getUserStockHistory(data.pageIndex, data.pageSize).subscribe((data) => {\n          this.totalSize = data[1];\n          this.dataSource.data = data[0];\n        });\n      })\n    }\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div *ngIf=\\\"data.length>0\\\" class=\\\"top\\\" [chart]=\\\"stockChart\\\"></div>\\n\\n<div *ngIf=\\\"data.length === 0\\\" class=\\\"top center\\\">\\n    <mat-card>User Don't have stocks in protfolio !</mat-card>\\n  </div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { StocksSrvService } from '../../services/stocks-service/stocks-srv.service';\nimport { Chart } from 'angular-highcharts';\n\n\n\n//Highcharts.setOptions(Highcharts.theme);\n\n@Component({\n  selector: 'app-user-protfolio-graph',\n  templateUrl: './user-protfolio-graph.component.html',\n  styleUrls: ['./user-protfolio-graph.component.css']\n})\nexport class UserProtfolioGraphComponent implements OnInit {\n\n  stockChart: Chart;\n  data: any = [];\n\n  constructor(private stockSrv: StocksSrvService) {\n\n    this.stockSrv.getUserStocksForChart().subscribe(data => {    \n      this.data = data; \n      this.stockChart = new Chart({\n        chart: {\n          plotBackgroundColor: null,\n          plotBorderWidth: null,\n          plotShadow: false,\n          type: 'pie'\n        },\n        title: {\n          text: 'User stocks value in the protfolio'\n        },\n        tooltip: {\n          pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n        },\n        plotOptions: {\n          pie: {\n            allowPointSelect: true,\n            cursor: 'pointer',\n            dataLabels: {\n              enabled: true,\n              format: '<b>{point.name}</b>: {point.percentage:.1f} %',\n              style: {\n                color: 'black'\n              }\n            }\n          }\n        },\n        series: [{\n          name: 'User Protfolio',\n          data: this.data\n        }]\n      });\n    });\n\n  }\n\n  ngOnInit(): void {\n\n  }\n\n}\n\n\n\n\n","module.exports = \"table {\\n    width: 100%;\\n    margin-top: 2%;\\n  }\\n\\n.up{\\n    color: green;\\n}\\n\\n.down{\\n    color: red;\\n}\\n\\nmat-card{\\n    text-align: center;\\n}\\n\\n.right{\\n    text-align:right;\\n    padding-right: 1%;\\n}\\n\\ntr.mat-footer-row {\\n    font-weight: bold;\\n  }\"","module.exports = \"<mat-tab-group>\\n  <mat-tab label=\\\"Protfolio\\\">\\n\\n    <div class=\\\"spinner-container\\\" *ngIf=\\\"dataSource.loading$ | async\\\">\\n      <mat-progress-spinner></mat-progress-spinner>\\n    </div>\\n\\n    <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n      <!-- Symbol Column -->\\n      <ng-container matColumnDef=\\\"symbol\\\">\\n        <th color=\\\"primary\\\" class=\\\"center\\\" mat-header-cell *matHeaderCellDef mat-sort-header> Symbol </th>\\n        <td class=\\\"center\\\" mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\n        <td class=\\\"center\\\" mat-footer-cell *matFooterCellDef> Total </td>\\n      </ng-container>\\n\\n      <!-- Name Column -->\\n      <ng-container matColumnDef=\\\"name\\\">\\n        <th color=\\\"primary\\\" class=\\\"center\\\" mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\n        <td class=\\\"center\\\" mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n        <td mat-footer-cell *matFooterCellDef></td>\\n      </ng-container>\\n\\n      <ng-container matColumnDef=\\\"amount\\\">\\n        <th color=\\\"primary\\\" class=\\\"right\\\" mat-header-cell *matHeaderCellDef mat-sort-header> Amount </th>\\n        <td class=\\\"right\\\" mat-cell *matCellDef=\\\"let element\\\"> {{element.amount | number:'1.0-0'}} </td>\\n        <td mat-footer-cell *matFooterCellDef></td>\\n      </ng-container>\\n\\n      <!-- price Column -->\\n      <ng-container matColumnDef=\\\"price\\\">\\n        <th color=\\\"primary\\\" class=\\\"right\\\" mat-header-cell *matHeaderCellDef mat-sort-header> Buy Price </th>\\n        <td class=\\\"right\\\" mat-cell *matCellDef=\\\"let element\\\"> {{element.price | currency}} </td>\\n        <td mat-footer-cell *matFooterCellDef></td>\\n      </ng-container>\\n\\n      <!-- priceChangeInDot Column -->\\n      <ng-container matColumnDef=\\\"priceChangeDots\\\">\\n        <th color=\\\"primary\\\" class=\\\"right\\\" mat-header-cell *matHeaderCellDef mat-sort-header> Change $</th>\\n        <td class=\\\"right\\\" mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"checkChangeRaised(element.priceChangeDots)?'up':'down'\\\">\\n          {{element.priceChangeDots | currency}}\\n        </td>\\n        <td mat-footer-cell *matFooterCellDef></td>\\n      </ng-container>\\n\\n      <!-- priceChangeInPercent Column -->\\n      <ng-container matColumnDef=\\\"priceChangePercent\\\">\\n        <th color=\\\"primary\\\" class=\\\"right\\\" mat-header-cell *matHeaderCellDef mat-sort-header> Change % </th>\\n        <td class=\\\"right\\\" mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"checkChangeRaised(element.priceChangeDots)?'up':'down'\\\">{{element.priceChangePercent\\n          | percent:'1.2-2'}}</td>\\n        <td mat-footer-cell *matFooterCellDef></td>\\n      </ng-container>\\n\\n      <!-- stock value Column -->\\n      <ng-container matColumnDef=\\\"total\\\">\\n          <th color=\\\"primary\\\" class=\\\"right\\\" mat-header-cell *matHeaderCellDef mat-sort-header> Gain / Lose </th>\\n          <td class=\\\"right\\\" mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"checkChangeRaised(element.priceChangeDots)?'up':'down'\\\">{{element.total\\n            | currency}}</td>\\n          <td class=\\\"right\\\" mat-footer-cell *matFooterCellDef [ngClass]=\\\"checkChangeRaised(getTotalCost())?'up':'down'\\\"> {{getTotalCost()\\n            | currency}} </td>\\n        </ng-container>\\n\\n      <!-- stock gain/lose Column -->\\n      <ng-container matColumnDef=\\\"value\\\">\\n        <th color=\\\"primary\\\" class=\\\"right\\\" mat-header-cell *matHeaderCellDef mat-sort-header> value </th>\\n        <td class=\\\"right\\\" mat-cell *matCellDef=\\\"let element\\\">{{element.value\\n          | currency}}</td>\\n        <td class=\\\"right\\\" mat-footer-cell *matFooterCellDef > {{getTotalValue()\\n          | currency}} </td>\\n      </ng-container>\\n\\n      <!-- Buy operation Column -->\\n      <ng-container matColumnDef=\\\"buyOperation\\\">\\n        <th color=\\\"primary\\\" class=\\\"center\\\" mat-header-cell *matHeaderCellDef> Buy </th>\\n        <td class=\\\"center\\\" mat-cell *matCellDef=\\\"let element\\\">\\n          <button mat-stroked-button color=\\\"primary\\\" (click)=goToBuyStocks(element)>Buy</button>\\n        </td>\\n        <td mat-footer-cell *matFooterCellDef></td>\\n      </ng-container>\\n\\n      <!-- sell Column -->\\n      <ng-container matColumnDef=\\\"sellOperation\\\">\\n        <th color=\\\"primary\\\" class=\\\"center\\\" mat-header-cell *matHeaderCellDef> Sell </th>\\n        <td class=\\\"center\\\" mat-cell *matCellDef=\\\"let element\\\">\\n          <button mat-stroked-button color=\\\"primary\\\" (click)=goToSellStocks(element)>Sell</button>\\n        </td>\\n        <td mat-footer-cell *matFooterCellDef></td>\\n      </ng-container>\\n\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n      <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns\\\"></tr>\\n    </table>\\n    <div *ngIf=\\\"dataSource.data.length === 0\\\">\\n      <mat-card>User don't own any stocks!</mat-card>\\n    </div>\\n\\n  </mat-tab>\\n\\n  <mat-tab label=\\\"Transactions\\\">\\n    <ng-template matTabContent>\\n      <app-user-history></app-user-history>\\n    </ng-template>\\n  </mat-tab>\\n\\n  <mat-tab label=\\\"Graph\\\">\\n    <ng-template matTabContent>\\n      <app-user-protfolio-graph></app-user-protfolio-graph>\\n    </ng-template>\\n  </mat-tab>\\n\\n</mat-tab-group>\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material';\nimport { StocksSrvService } from '../../services/stocks-service/stocks-srv.service';\nimport { Socket } from 'ngx-socket-io';\nimport { Observable } from 'rxjs';\nimport { StockProtfolio } from '../../models/stock';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-user-protfolio',\n  templateUrl: './user-protfolio.component.html',\n  styleUrls: ['./user-protfolio.component.css']\n})\nexport class UserProtfolioComponent implements OnInit {\n\n  ngOnDestroy(): void {\n    this.socket.removeListener('protfolio');\n  }\n\n  displayedColumns: string[] = ['symbol',\n    'name',\n    'amount',\n    'price',\n    'priceChangeDots',\n    'priceChangePercent',\n    'value',\n    'total',\n    'buyOperation',\n    'sellOperation'\n  ];\n\n  dataSource = new MatTableDataSource();\n  rawData:Array<StockProtfolio> = [];\n\n  private getUserProtfolio(): Observable<Array<StockProtfolio>> {\n    return this.socket.fromEvent(\"protfolio\");\n  }\n\n  constructor(private stockSrv: StocksSrvService, private socket: Socket, private router:Router) {\n    this.getUserProtfolio().subscribe(data => {\n      this.dataSource.data = data\n      this.rawData = data;  // used to map the total value\n    });\n\n    this.stockSrv.getStocksFromProtfolio().subscribe(data => {\n      this.dataSource.data = data\n      this.rawData = data;\n    });\n  }\n\n  // used to make red/green color indicator\n  checkChangeRaised(dots) {\n    return dots >= 0;\n  }\n\n  goToBuyStocks(element: StockProtfolio) {\n    this.router.navigate(['/', 'user-trade', element.symbol, 1]);\n  }\n\n  goToSellStocks(element: StockProtfolio) {\n    this.router.navigate(['/', 'user-trade', element.symbol, 2]);\n  }\n\n  getTotalCost() {\n    return this.rawData.map(t => t.total).reduce((acc, value) => acc + value, 0);\n  }\n\n  getTotalValue() {\n    return this.rawData.map(v => v.value).reduce((acc, value) => acc + value, 0);\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".trade{\\n    margin-top: 2% !important;\\n    width: 30%;\\n    margin: 0 AUTO;\\n}\\n\\nmd-card{\\n    font-size: 1.5em !important;    \\n}\\n\\nspan.mat-slider-thumb-label-text {\\n    color: black !important;\\n}\\n\\n::ng-deep .mat-slider-thumb-label {\\n      -webkit-transform: rotate(45deg) !important;\\n              transform: rotate(45deg) !important;\\n      border-radius: 50% 50% 0 !important;\\n    }\\n\\n::ng-deep    .mat-slider-thumb {\\n      -webkit-transform: scale(0) !important;\\n              transform: scale(0) !important;\\n    }\\n\\n::ng-deep   .mat-slider-thumb-label-text {\\n      opacity: 1 !important;\\n      color: black !important;\\n    }\\n\\n::ng-deep .mat-slider-horizontal{\\n        width: 100% !important;\\n        display: block !important;\\n    }\\n\\n::ng-deep .slider-label{\\n        font-size: 0.8em !important;\\n        margin-bottom: 2em !important;\\n    }\\n\\n::ng-deep .mat-card-header-text {\\n        margin: 0 auto !important;  \\n    }\\n\\n::ng-deep .mat-card-title{\\n        font-size: 1.5em !important;\\n    }\\n\\n::ng-deep .mat-form-field {\\n        display: block !important;\\n    }\"","module.exports = \"<form class=\\\"trade\\\" *ngIf=\\\"form\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"save()\\\">\\n  <mat-card>\\n    <mat-card-header>\\n      <mat-card-title>{{stock.operation | opTransform}} Stocks</mat-card-title>\\n\\n    </mat-card-header>\\n    <mat-card-content>\\n      <p class=\\\"center\\\">\\n        <mat-form-field>\\n          <mat-label>Stock Symbol</mat-label>\\n          <input matInput type=\\\"text\\\" formControlName='symbol'>\\n        </mat-form-field>\\n      </p>\\n      <p class=\\\"center\\\">\\n        <mat-form-field>\\n          <mat-label>Stock Name</mat-label>\\n          <input matInput type=\\\"text\\\" formControlName='name'>\\n        </mat-form-field>\\n      </p>\\n      <p class=\\\"center\\\">\\n        <mat-form-field>\\n          <mat-label>Stock Price</mat-label>\\n          <input matInput type=\\\"text\\\" formControlName='price'>\\n          <span matPrefix>$&nbsp;</span>\\n        </mat-form-field>\\n      </p>\\n\\n      <p class=\\\"center\\\">\\n        <mat-form-field *ngIf=\\\"stock.operation==1\\\">\\n          <mat-label>Stock Amount</mat-label>\\n          <input [errorStateMatcher]=\\\"matcher\\\" matInput type=\\\"text\\\" formControlName='amount'>\\n          \\n          <mat-hint>How many stocks you wishes to buy?</mat-hint>\\n          <mat-error *ngIf=\\\"form.get('amount').hasError('forbiddenNumber') && !form.get('amount').hasError('required')\\\">\\n              Please enter a valid stocks amount\\n            </mat-error>\\n            <mat-error *ngIf=\\\"form.get('amount').hasError('required')\\\">\\n              Amount is <strong>required</strong>\\n            </mat-error>\\n        </mat-form-field>\\n      </p>\\n\\n      <p *ngIf=\\\"stock.operation==2\\\"  class=\\\"slider-label\\\">\\n        <mat-label>Amount of stocks to sell:</mat-label>\\n      </p>\\n      <p *ngIf=\\\"stock.operation==2\\\">\\n\\n        <mat-slider formControlName='amount' *ngIf=\\\"stock.operation==2\\\" [max]=\\\"stock.amount\\\" [min]=\\\"0\\\" [step]=\\\"1\\\" [thumbLabel]=\\\"true\\\"\\n          [tickInterval]=\\\"1\\\" [displayWith]=\\\"formatLabel\\\"></mat-slider>\\n      </p>\\n    </mat-card-content>\\n    <mat-card-actions class=\\\"center\\\">\\n      <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\">Commit</button>\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"cancel()\\\">Cancel</button>\\n    </mat-card-actions>\\n  </mat-card>\\n</form>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder, FormControl, ValidatorFn, AbstractControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { UserStocksOp } from '../../models/stock';\nimport { StocksSrvService } from '../../services/stocks-service/stocks-srv.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { formatNumber } from '@angular/common';\nimport { MatDialog, ErrorStateMatcher } from '@angular/material';\nimport { SuccessDialogComponent } from '../success-dialog/success-dialog.component';\n\n// used for amount validation\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-user-trade',\n  templateUrl: './user-trade.component.html',\n  styleUrls: ['./user-trade.component.css']\n})\n\nexport class UserTradeComponent implements OnInit {\n\n  form: FormGroup;\n  stock: UserStocksOp;\n  matcher = new MyErrorStateMatcher();\n\n  setForm() {\n    this.form = this.fb.group({\n      symbol: new FormControl({ value: this.stock.symbol, disabled: true }),\n      name: new FormControl({ value: this.stock.name, disabled: true }),\n      amount: new FormControl(this.stock.amount,\n        [Validators.required, this.forbiddenNumberValidator(/^[1-9][0-9]*$/)]),\n      price: new FormControl({ value: formatNumber(this.stock.price, 'en-US', '1.2-2'), disabled: true }),\n      operation: [this.stock.operation]\n    })\n  }\n\n  // custom validator for number in regEX\n  private forbiddenNumberValidator(numberRe: RegExp): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const forbidden = !numberRe.test(control.value);\n      return forbidden ? { 'forbiddenNumber': { value: control.value } } : null;\n    };\n  }\n\n  constructor(private stockSrv: StocksSrvService, private fb: FormBuilder,\n    private dialog: MatDialog, private activatedRoute: ActivatedRoute, private router: Router) {\n\n    this.activatedRoute.params.subscribe(params => {\n      this.stock = null;\n      this.stockSrv.stocks$.subscribe(stocks => {\n        let currentStock = stocks.filter(stock => stock.symbol.includes(params['symbol']))\n        // first time enter to form\n        if (!this.stock) {\n          // check if buy operation\n          if (parseInt(params['operation'], 10) === 1) {\n            this.stock = {\n              symbol: currentStock[0].symbol,\n              name: currentStock[0].name,\n              price: currentStock[0].price,\n              operation: 1,\n              amount: 0\n            }\n            this.setForm();\n\n          } else { // check if sell operation\n            this.stockSrv.getStockFromProtfolio(currentStock[0].symbol).subscribe(userStock => {\n              // if (userStock) {\n              this.stock = {\n                symbol: currentStock[0].symbol,\n                name: currentStock[0].name,\n                price: currentStock[0].price,\n                operation: 2,\n                amount: parseInt(userStock[0].amount)\n              }\n\n              this.setForm();\n            })\n          }\n        } else {// if the route change to diffrent stock the component not reload so change manually\n          this.stock.name = currentStock[0].name;\n          this.stock.symbol = currentStock[0].symbol;\n          this.stock.price = currentStock[0].price;\n          this.stock.operation = parseInt(params['operation'], 10);\n          this.form.controls.symbol.setValue(currentStock[0].symbol);\n          this.form.controls.name.setValue(currentStock[0].name);\n          this.form.controls.price.setValue(formatNumber(currentStock[0].price, 'en-US', '1.2-2'));\n          this.form.controls.operation.setValue(this.stock.operation);\n        }\n      });\n\n    });\n  }\n\n  cancel() {\n    this.router.navigate(['/', 'user-protfolio']);\n  }\n\n  save() {\n    if (this.form.valid) {\n      this.stock.amount = parseInt(this.form.get('amount').value);\n      let data: any = {\n        type: this.stock.operation === 1 ? 'buy' : 'sell',\n        name: this.stock.name,\n        amount: this.stock.amount,\n        price: this.stock.price,\n        total: this.stock.price * this.stock.amount\n      }\n\n      if (this.stock.operation === 1) { // if buy operation\n        this.stockSrv.buyStocks(this.stock).subscribe(x => {\n          this.dialog.open(SuccessDialogComponent, { data }).afterClosed().subscribe(() => {\n            this.router.navigate(['/', 'user-protfolio']);\n          });\n        });\n      } else { // if sell operation\n        this.stockSrv.sellStocks(this.stock).subscribe(x => {\n          this.dialog.open(SuccessDialogComponent, { data }).afterClosed().subscribe(() => {\n            this.router.navigate(['/', 'user-protfolio']);\n          });;\n\n        });\n      }\n    }\n  }\n\n  // used to sell slider format for big numbers\n  formatLabel(value: number | null) {\n    if (!value) {\n      return 0;\n    }\n\n    if (value >= 1000) {\n      return Math.round(value / 1000) + 'k';\n    }\n\n    return value;\n  }\n\n  ngOnInit() {\n  }\n\n}\n\n","module.exports = \"h1, h3, h4, h5 {\\n    margin-bottom: 0;\\n    margin-top: 10px;\\n  }\\n  \\n  .error-container {\\n    width: 50%;\\n    margin: 0 auto;\\n    margin-top: 20%;\\n    text-align: center;\\n  }\"","module.exports = \"<div class=\\\"error-container\\\">\\n\\n    <h1>Error name : {{ routeParams?.name }}</h1>\\n    <h2>Error message : {{ routeParams?.message }}</h2>\\n    <a mat-raised-button (click)=\\\"tryAgain()\\\">\\n      <h5>Go to Home</h5>\\n    </a>\\n  \\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationSrvService } from '../../services/notification-service/notification-srv.service';\n\n@Component({\n  selector: 'app-errors',\n  templateUrl: './errors.component.html',\n  styleUrls: ['./errors.component.css']\n})\nexport class ErrorsComponent implements OnInit {\n\n  routeParams;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,private router: Router,\n    private notificationSrv:NotificationSrvService\n  ) { \n\n    \n  }\n\n  tryAgain() {\n    this.notificationSrv.notifyError(false);\n    this.router.navigate(['/']);\n  }\n\n  ngOnInit() {\n    this.routeParams = this.activatedRoute.snapshot.queryParams;\n  }\n\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { StocksSrvService } from '../../services/stocks-service/stocks-srv.service';\nimport { NotificationSrvService } from '../../services/notification-service/notification-srv.service';\n\n@Injectable()\nexport class ErrorsHandler implements ErrorHandler {\n    constructor(\n        private injector: Injector,\n    ) { }\n\n    handleError(error: Error | HttpErrorResponse) {\n        const notificationSrv = this.injector.get(NotificationSrvService);\n        const router = this.injector.get(Router);\n        console.log('ininin')\n        if (error instanceof HttpErrorResponse) {\n            // Server error happened      \n            if (!navigator.onLine) {\n                // No Internet connection\n                router.navigate(['/error'], { queryParams: { name: 'Conectivity problem', message: 'No Internet Connection' } });\n            } else {\n                // Http Error\n                router.navigate(['/error'], { queryParams: { name: error.name, message: error.message } });\n            }\n        } else {\n            // Client Error Happend     \n            router.navigate(['/error'], { queryParams: { name: 'App error', message: 'Please try to reach godav' } });\n        }\n        // Log the error anyway\n        notificationSrv.notifyError(true);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'opTransform'\n})\nexport class OpTransformPipe implements PipeTransform {\n\n  transform(value: number, args?: any): string {\n    if (value == 1 )\n      return 'Buy';\n    else\n      return 'Sell';\n  }\n\n}\n","import { StocksViewComponent } from '../componenets/stocks-view/stocks-view.component'\nimport { UserProtfolioComponent } from '../componenets/user-protfolio/user-protfolio.component'\nimport { UserHistoryComponent } from '../componenets/user-history/user-history.component'\nimport { StockHistoryComponent } from '../componenets/stock-history/stock-history.component'\nimport { Route } from '@angular/router';\nimport { UserTradeComponent } from '../componenets/user-trade/user-trade.component';\nimport { StockHistoryChartComponent } from '../componenets/stock-history-chart/stock-history-chart.component';\nimport { ErrorsComponent } from '../errors/errors-component/errors.component';\n\nexport const ROUTES: Route[] = [\n\n  {\n    path: 'stocks-view', component: StocksViewComponent\n  },\n  {\n    path: 'user-protfolio', component: UserProtfolioComponent\n  },\n  {\n    path: 'user-history', component: UserHistoryComponent\n  },\n  {\n    path: 'stock-history/:symbol', component: StockHistoryComponent\n  },\n  {\n    path: 'user-trade/:symbol/:operation', component: UserTradeComponent\n  },\n  {\n    path: 'stock-history-chart/:symbol', component: StockHistoryChartComponent\n  },\n  {\n    path: 'error', component: ErrorsComponent\n  },\n  { path: '', pathMatch: 'full', redirectTo: '/' }\n\n];\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationSrvService {\n\n  errors$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor() { }\n\n  notifyError(isError) {\n    this.errors$.next(isError);\n  }\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Stock, StockProtfolio, UserStocksOp } from '../../models/stock';\nimport { HttpClient } from '@angular/common/http';\nimport { Socket } from 'ngx-socket-io';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StocksSrvService {\n\n  stocks$: BehaviorSubject<Array<Stock>> = new BehaviorSubject<Array<Stock>>([]);\n  \n  // used to get data of the market from the socket\n  private getStocks(): Observable<Array<Stock>> {\n    return this.socket.fromEvent(\"update\");\n  }\n\n  // used to get data of the market for first time before socket emit from server\n  private getStocksFromMarket(): Observable<Array<Stock>> {\n    return this.http.get<Array<Stock>>(`${environment.API_URL}/api/stocks/`);\n  }\n\n  getStockFromProtfolio(symbol: string): Observable<StockProtfolio> {\n    return this.http.get<StockProtfolio>(`${environment.API_URL}/api/protfolio/${symbol}`);\n  }\n\n  getStocksFromProtfolio(): Observable<Array<StockProtfolio>> {\n    return this.http.get<Array<StockProtfolio>>(`${environment.API_URL}/api/protfolio/`);\n  }\n\n  getStockHistory(symbol: string, pageIndex: number, pageSize: number): Observable<Array<any>> {\n    return this.http.get<Array<any>>(`${environment.API_URL}/api/stocks/history/${symbol}?page=${pageIndex}&size=${pageSize}`);\n  }\n\n  getStockHistoryForChart(symbol: string): Observable<Array<any>> {\n    return this.http.get<Array<any>>(`${environment.API_URL}/api/stocks/history-chart/${symbol}`);\n  }\n\n  getStocksMarketForChart(): Observable<Array<any>> {\n    return this.http.get<Array<any>>(`${environment.API_URL}/api/stocks/history-charts/`);\n  }\n\n  getUserStocksForChart(): Observable<Array<any>> {\n    return this.http.get<Array<any>>(`${environment.API_URL}/api/user-info/user-protfolio-chart/`);\n  }\n\n  getUserStockHistory(pageIndex: number, pageSize: number): Observable<Array<any>> {\n    return this.http.get<Array<any>>(`${environment.API_URL}/api/user-info/transactions/?page=${pageIndex}&size=${pageSize}`);\n  }\n\n  buyStocks(stock: UserStocksOp): Observable<UserStocksOp> {\n    return this.http.post<UserStocksOp>(`${environment.API_URL}/api/protfolio/buy`, stock);\n  }\n\n  sellStocks(stock: UserStocksOp): Observable<UserStocksOp> {\n    return this.http.post<UserStocksOp>(`${environment.API_URL}/api/protfolio/sell`, stock);\n  }\n\n  constructor(private http: HttpClient, private socket: Socket) {\n    // subscribe to market stocks price change when socket emit from server\n    this.getStocks().subscribe(results => {\n      this.stocks$.next(results);\n    });\n\n    // used for first time before socket emits the data\n    this.getStocksFromMarket().subscribe(results => {\n      this.stocks$.next(results);\n    });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  API_URL: 'http://localhost:3002'\n  //`${process.env.BASE_URL}` ||\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n","/* (ignored) */"],"sourceRoot":""}